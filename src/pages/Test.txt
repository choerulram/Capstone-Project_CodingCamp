// Tambahkan tombol baru untuk cek rekomendasi gizi
  const recommendBtn = document.createElement('button');
  recommendBtn.id = 'nav-recommendation';
  recommendBtn.textContent = 'Cek Rekomendasi Gizi';
  recommendBtn.style.display = 'inline-block';
  container.querySelector('#main-nav').appendChild(recommendBtn);

  // Event handler tombol rekomendasi
  recommendBtn.onclick = async function() {
    showLoading();
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        hideLoading();
        showError('Anda harus login terlebih dahulu.');
        return;
      }
      // 1. Fetch today's scan history
      const res = await fetch(${API_BASE}/scan-history, {
        method: 'GET',
        headers: { 'Authorization': 'Bearer ' + token }
      });
      const data = await res.json();
      // 2. Filter for today and aggregate nutrition
      const today = new Date().toISOString().slice(0, 10);
      const giziUtama = ['energi','protein','lemak total','karbohidrat','serat','gula','garam'];
      const totalGizi = { energi:0, protein:0, 'lemak total':0, karbohidrat:0, serat:0, gula:0, garam:0 };
      const todayHistory = (data.history || []).filter(item => (item.uploaded_at || '').slice(0, 10) === today);
      todayHistory.forEach(item => {
        giziUtama.forEach(k => {
          totalGizi[k] += Number(item.kandungan_gizi && item.kandungan_gizi[k] ? item.kandungan_gizi[k] : 0);
        });
      });
      // 3. Get user biodata from JWT token
      function parseJwt (token) {
        try {
          const base64Url = token.split('.')[1];
          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
          const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
          }).join(''));
          return JSON.parse(jsonPayload);
        } catch (e) { return {}; }
      }
      const userData = parseJwt(token);
      // 4. Build payload
      const inputData = {
        umur: userData.umur,
        jenis_kelamin: userData.gender || userData.jenis_kelamin,
        hamil: userData.hamil || false,
        usia_kandungan: userData.usia_kandungan || null,
        menyusui: userData.menyusui || false,
        umur_anak: userData.umur_anak || null,
        konsumsi: {
          energy_kal: totalGizi['energi'],
          protein_g: totalGizi['protein'],
          fat_g: totalGizi['lemak total'],
          carbohydrate_g: totalGizi['karbohidrat'],
          sodium_mg: totalGizi['garam'],
          sugar_g: totalGizi['gula']
        }
      };
      // 5. POST to /recommendation
      const response = await fetch(${API_BASE}/recommendation, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(inputData)
      });
      const recData = await response.json();
      hideLoading();
      if (!response.ok) {
        showError(recData.error || 'Gagal mendapatkan rekomendasi');
      } else {
        document.getElementById('message').style.display = 'block';
        document.getElementById('message').textContent = JSON.stringify(recData, null, 2);
      }
    } catch (err) {
      hideLoading();
      showError('Gagal memanggil rekomendasi: ' + err.message);
    }
  };